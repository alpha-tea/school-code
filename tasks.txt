Глава 1. Ввод и вывод числовых данных. Опертор присваивания.


 Простейшие программы. Арифметические выражения: 1.1-13 - четные или нечетные на выбор, если есть варианты, то варианты все; 1.14-17 - в каждом задании выбрать 3-4 варианта поразнообразней, использовать функции математической библиотеки math.h можно посмотреть в справочнике; 1.18-21 - четные или нечетные на выбор, достаточно одного варианта в каждом задании.

 Вычисления по известным формулам. Здесь много типовых заданий, которые попадются на разного рода практических, контрольных и прочих лабораторных: 1.22-23, 1.25-29, 1.30 - один вариант, 1.31 - очень популярная, 1.35-37 - немного вспомнить геометрию; 1.39-42 - любую одну на выбор но оба варианта, 1.44-1.51 - четные или нечетные на выбор, 1.52-1.54 - одну на выбор; 1.15-56 - одну на выбор; 1.57-58 - обязательно(58-ая часть её), т.к. будет в КиР.

 Часто используемые алгоритмы: 1.59-60 - обе, т.к. типовой алгоритм обмена переменными; 1.61-62 - 2-3 на выбор из каждой.


Глава 2. Целочисленная арифметика.


 Простейшие задачи: 2.1-2.9 - три любые на выбор.

 Выделение цифр в записи числа: 2.12-18 - обязательно, для вычислений и закрепления последовательности действий; 2.21-23 - одну по желанию(или можно пропустить).

 Нахождение целого числа по информации о его цифрах: 2.24-2.33 - три-пять на выбор, число Н другие параметры вводить с клавиатуры не надо, просто задать его как переменную. Оставить комментарии как именно было решено.

 Задачи повышенной сложности. 2.34-36 - любая полностью; 2.37-38 - одна на выбор. 2.39-42 - запутанно, но одну на выбор, если получится. 2.43 - попытаться применить хитрость. :). Все задачи повышенной сложности либо делать подробнее вывод в консоль, что происходит, либо снабжать текст комментариями. В задачах на последовательности активно применять целочисленную арифметику.


Глава 3. Величины логического типа.


 Вычисление логических выражения: 3.1-10 - четные или нечетные по выбору, все варианты; 3.11-12 - одну на выбор, 2-3 варианта. 3.13-26 - любую каждую третью(14,17,20,23...), все варианты в выбранных. Вывод оформлять через простой вывод логического 0 или 1, использовать целочисленный тип для логической переменной.

 Составление логических выражений: 3.27-31 - две на выбор, все варианты; 3.32-33 - одну на выбор, подробнее вывод в консоль(можно ссылку на рисунок); 3.34-35 - дополнительно, не обязательно, но 3-4 варианта из каждой реализовать, они небольшие. Заглянуть в Вики, чтобы уточнить правила шахмат.


Глава 4. Условные оператор.


 Полный условный оператор: 4.1-2 - одну на выбор; 4.5 - оба варианта; 4.6-12 - три любые на выбор; 4.13-14 - обязательно, т.к. часто попадается; 4.15 - не совсем ясно почему здесь стоит применять условный оператор, но на вещании мы её сделали; 4.16-17 - одну на выбор, оба варианта; задачи помеченные звездой оставляем на десерт, если всё быстро пойдет, то их сделаем по завершению главы.

 Целочисленная арифметика и условный оператор: хм, эту часть мы решали во второй главе очень активно, можно пропустить. Но если трубуется закрепление, то можно каждую 3-ую задачу реализовать, по желанию. 4.20-36. 4.35 - можно попробовать.

 Использование сложных условий: 4.37 - по желанию, после если что закомментировать ввод; 4.39 попробовать переменные, чтобы попасть во все области; 4.40-41 - одна на выбор; 4.42-48 - 3 любые на выбор; 4.49 - обязательно, распространенное задание; 4.50-52 - одна на выбор; 4.53 - полностью; 4.55-60 - одна на выбор, оба варианта; 4.61 - обязательно, часто встречаемая; 4.62-64 - одну на выбор; 4.65 - обязательно, пригодиться в работе, календарь часто сложнее чем кажется; 4.66-69 - чуть сложнее, дополнительно, или оставить на десерт.

 Неполный и вложенные условные операторы: 4.70-75 - три четные или нечетных номера, переменные можно использовать по ходу одни и те же или с дополнениями, оба варианта реализовать; 4.76-77 - одну по желанию, т.к. есть ввод, после решения можно закомментировать; 4.78-80 - все, но не использовать цикл и объединить решение как одну, использовать один массив целочисленных; 4.81-84 - аналогичны предыдущим, можно пропустить; 4.85-90 - четные или нечетные на выбор, можно оформлять сложными логическими выражениями; 4.91-93 - одну на выбор, предпочтительней 91-ая, все варианты(а-в); 4.94-103 - четные или нечетные на выбор, цикл не использовать.

 Оператор выбора варианта(switch): 4.110 - полностью; 4.111 - дополнительно по желанию, пример с календарем.

 Задачи повышенной сложности: 4.116-4.141 - свободное решение дополнительно, от 5 до 25 задач по возможности. Задачи выбранные и фактически решенные на вещании: 4.125; 4.128; 4.132; 4.134-135; 4.140-4.141. Задачи решенные мною по ходу планирования: 4.118, 4.119, 4.125, 4.128, 4.132, 4.134, 4.135, 4.140.


Глава 5. Оператор цикла с параметром.


 Организация вывода данных по требуемому формату: 5.3 - полностью все варианты, обьединить всё в одну большую таблицу, параметры А и Б просто задать и размер таблицы ограничить на 5-7 строк в итоге(можно использовать табуляции или пробелы и формат через поля принтф); 5.8-5.10 - все, и так же можно обьединить в один цикл и одну большую таблицу построить(шапку таблицы не забыть), но можно и по отдельности; 5.11-5.12 - любая на выбор; 5.15 - можно просто в строчку вывод сделать, без клавиатуры; 5.16-5.26 - четные или нечетные по выбору, также можно объединять в одну таблицу, если удобно.

 Обработка фиксированной последовательности чисел: 5.27-5.30 - одну на выбор, но все варианты, значения задавать переменной; 5.31-5.35 - сделать все, но попробовать использовать один цикл по Н и можно условные операторы, вывести суммы уже после цикла, если не получается, то через циклы на каждую задачу, причем если Н меньше чем по условию, то можно сделать последовательность чуть короче, но минимум 3 элемента должно быть в каждой из них. Результаты по элементам и сумме удобней представить в типе double.

 Обработка данный во время ввода: 5.39-5.56 - каждую 3-ую задачу, использовать генератор случайных чисел для всех задач в этом разделе; 5.57-5.65 - каждую 3-ую тоже. Если где-то не указано количество элементов, то минимум использовать 3-7 элементов.

 Рекуррентные соотношения: это полезный раздел как на практике, так и потом пригодится нам для изучения. 5.66-5.76 - все задачи по возможности, но если есть варианты, то можно ограничиться только одним в задании. Все задания разворачивать последовательность через пробел в консоль. Индексы можно записывать в виде A[k], A[n+1] и т.д. Дроби представлять ввиде целочисленной пары числителя и знаменателя.

 Расчет площади кривой: простые численные методы, одна по желанию, но так-то существуют более общие алгоритмы.

 Разные задачи: 5.81-5.85 все подряд; 5.86-5.96 - четные или нечетные на выбор; в этом разделе постараться оформить вычисления ввиде отдельных функций.

 Общие рекомендации: использовать для последовательностей заданных с клавиатуры(или просто случанайных цифр) значений генератор случайных чисел.

printf("Example of random sequence, #include <stdlib.h>: ");
srand(0);   // Инициализация последовательности случайных чисел любым другим значением.
for (int i = 0; i < 10; ++i) {
    int a = rand() % 100;   // Генерируем числа от 0 до 99.
    printf("%d ", a);
}
printf("\n");

 Глава 6. Операторы цикла с условием.

 Обработка числовых последовательностей. 6.1-6.21 - каждую третью на выбор, для последовательностей использовать или генератор случайных чисел или простые правила. В последовательностях удобней применять ограничения достаточные для тестирования алгоритма, не слишком длинные, но и не короткие.

 Использование условного оператора в теле операторов цикла с условием. 6-22-6.42. Каждую третью по выбору. Слишком длинные последовательности желательно не выводить или выводить в строку, через любой разделитель, "запятая" или "пробел". 6.43-44. Задачи объединить в один цикл и сделать все вычисления рядом. Использовать можно простые целые числа, вместо вещественных и простой генератор через сложение, чтобы получалась последовательность не возрастающих чисел. Также можно посчитать частоту вхождения чисел в последовательность. Использовать при этом пару целочисленных массивов для удобства. 6.45. - классика, реализовать на основе описания алгоритма и оформить в отдельную функцию с тестированием нескольких вариантов.
 
 Использование условного оператора после операторов цикла с условием. 6.46-6.75 - каждую третью на выбор, все варианты, если их несколько. Там где ограничения по числу слишком велики или последовательность слишком длинная, то по использовать минимальные параметры для проверки. 6.52 - можно простым перебором в цикле, классические алгоритмы оставим на десерт. 6.76-6.79 - оформить ввиде функций, которые возвращают integer - позицию искомого элемента последовательности или -1, если элемент не найден. Параметры прогрессий вводить ввиде переменных на вход функции; для 6.76 - можно сделать одну универсальную функцию, а не две разных.

 Использование условного оператора в теле операторов цикла с условием и после него. 6.80-6.87 - каждую вторую на выбор.

 Разные задачи. 6.88-6.90 - одну на выбор; 6.91 - полностью, оформить ввиде функции; 6.92-93 - одну на выбор, можно использовать простые целочисленные массивы; 6.94-95 - одну на выбор; 6.96-6.97 - по желанию одну на выбор, использовать массивы, в последующих главах где будет поиск/массивы будут аналогичные; 6.98-6.101 - уже делали в предыдущих главах, так что по желанию или пропускаем; 6.102-6.103 - классика, обязательно, оформить функцией с подробным выводом в консоль и передачей параметров по адресу; 6.104-6.105 - одну на выбор; 6.106-6.111 - все, можно обьединять некоторые задачи; 6.112-6.114 - часть уже делали, так что любые по желанию или можно пропустить;
6.115 - попробовть один вариант, может пригодиться дальше.

 